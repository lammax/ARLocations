//
//  MapSceneInteractor.swift
//  AR Locations
//
//  Created by Mac on 06.07.2019.
//  Copyright (c) 2019 Lammax. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreLocation
import MapKit

protocol MapSceneBusinessLogic {
    func saveLocation(request: MapScene.Location.Request)
    func saveRegion(request: MapScene.Region.Request)
    func showLocation(request: MapScene.Location.Request)
    func showRegion(request: MapScene.Region.Request)
    func placeLocation(request: MapScene.PlaceLocation.Request)
    func loadLocations(request: MapScene.LoadLocations.Request)
    func doDeInit(request: MapScene.DeInit.Request)
}

protocol MapSceneDataStore {
    var currentLocation: CLLocation? { get set }
    var currentRegion: MKCoordinateRegion? { get set }
}

class MapSceneInteractor: MapSceneDataStore {
    
    weak var dbManager: DBManager? = DBManager.sharedInstance
    
    var presenter: MapScenePresentationLogic?
    var worker: MapSceneWorker?
    
    //MARK: DataStore
    var currentLocation: CLLocation? = nil {
        didSet {
            self.doLocation()
        }
    }
    var currentRegion: MKCoordinateRegion?
    
    //MARK: Locar vars
    var locations: [LocationCoordinate2D]?

    // MARK: Do stuff
    
    private func doLocation() {
        
        if let location = self.currentLocation {
            self.showLocation(request: MapScene.Location.Request(location: location))
        }
        
        if let region = self.currentRegion {
            self.showRegion(request: MapScene.Region.Request(region: region))
        } else if let defautRegion = self.worker?.makeRegion(maybeCenterCoordinate: self.currentLocation?.coordinate, maybeSpan: nil) {
            self.showRegion(request: MapScene.Region.Request(
                region: defautRegion
            ))
        }
        
    }
    
}

extension MapSceneInteractor: MapSceneBusinessLogic {
    
    func saveLocation(request: MapScene.Location.Request) {
        self.currentLocation = request.location
    }
    
    func saveRegion(request: MapScene.Region.Request) {
        self.currentRegion = request.region
    }

    func showLocation(request: MapScene.Location.Request) {
        let response = MapScene.Location.Response(location: request.location)
        presenter?.presentLocation(response: response)
    }
    
    func showRegion(request: MapScene.Region.Request) {
        let response = MapScene.Region.Response(region: request.region)
        presenter?.presentRegion(response: response)
    }
    
    func placeLocation(request: MapScene.PlaceLocation.Request) {
        if let location = self.currentLocation, let newLocation = dbManager?.newLocation(with: location) {
            self.locations?.append(newLocation)
            let response = MapScene.PlaceLocation.Response(location: newLocation)
            presenter?.presentPlaceLocation(response: response)
        }
    }
    
    func loadLocations(request: MapScene.LoadLocations.Request) {
        dbManager?.loadItems() { [weak self] maybeLocations in
            self?.locations = maybeLocations
            print("MapSceneInteractor locations.count = \(self?.locations?.count ?? -1)")
            let response = MapScene.LoadLocations.Response(locations: maybeLocations)
            self?.presenter?.presentLoadLocations(response: response)
        }
    }
    
    func doDeInit(request: MapScene.DeInit.Request) {
        self.dbManager = nil
        self.worker = nil
        self.currentLocation = nil
        self.currentRegion = nil
        self.locations = nil
        let response = MapScene.DeInit.Response()
        presenter?.presentDeInit(response: response)
        self.presenter = nil
    }
    
}
