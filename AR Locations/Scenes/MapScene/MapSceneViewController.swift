//
//  MapSceneViewController.swift
//  AR Locations
//
//  Created by Mac on 06.07.2019.
//  Copyright (c) 2019 Lammax. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

//TODO
// - how to add locations to local DB?

import UIKit
import MapKit

protocol MapSceneDisplayLogic: class {
    func displayLocation(viewModel: MapScene.Location.ViewModel)
    func displayRegion(viewModel: MapScene.Region.ViewModel)
    func displayPlaceLocation(viewModel: MapScene.PlaceLocation.ViewModel)
    func displayLoadLocations(viewModel: MapScene.LoadLocations.ViewModel)
    func displayDeInit(viewModel: MapScene.DeInit.ViewModel)
}

class MapSceneViewController: UIViewController {
    var interactor: MapSceneBusinessLogic?
    var router: (NSObjectProtocol & MapSceneRoutingLogic & MapSceneDataPassing)?
    
    weak var motionManager: MotionManager? = MotionManager.sharedInstance
    weak var locationManager: LocationManager? = LocationManager.sharedInstance
    weak var exifManager: ExifManager? = ExifManager.sharedInstance
    
    var isARSceneLoaded: Bool = false

    @IBOutlet weak var mapView: MKMapView!
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    deinit {
        self.doDeInit()
    }

    // MARK: Setup
  
    private func setup() {
        MapSceneConfigurator.sharedInstance.configure(viewController: self)
    }
  
    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        self.mapView.delegate = self
        self.motionManager?.delegate = self
        self.locationManager?.delegate = self
    }
    
    override func viewWillDisappear(_ animated: Bool) {
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        doOnDidLoad()
    }

    // MARK: Do something

    //@IBOutlet weak var nameTextField: UITextField!
    @IBAction func addLocationButtonClicked(_ sender: UIButton) {
        let request = MapScene.PlaceLocation.Request()
        self.interactor?.placeLocation(request: request)
    }
    
    func doOnDidLoad() {

        self.initMap()
        self.loadLocations()
        
    }
    
    private func initMap() {
        if let location = self.router?.dataStore?.currentLocation {
            mapView.setUserTrackingMode(.followWithHeading, animated: false)
            mapView.showsScale = true
            mapView.showsCompass = true
            let circleOverlay = MKCircle(center: location.coordinate,
                                         radius: location.horizontalAccuracy)
            self.mapView.addOverlay(circleOverlay)
        }
    }
    
    private func loadLocations() {
        let request = MapScene.LoadLocations.Request()
        self.interactor?.loadLocations(request: request)
    }
    
    private func saveLocation(location: CLLocation) {
        let request = MapScene.Location.Request(location: location)
        interactor?.saveLocation(request: request)
    }
    
    private func saveRegion(region: MKCoordinateRegion) {
        let request = MapScene.Region.Request(region: region)
        interactor?.saveRegion(request: request)
    }

    private func doDeInit() {
        let request = MapScene.DeInit.Request()
        interactor?.doDeInit(request: request)
    }
    
 }

extension MapSceneViewController: MapSceneDisplayLogic {
    
    func displayLocation(viewModel: MapScene.Location.ViewModel) {
        if let mapView = self.mapView {
            if mapView.centerCoordinate != viewModel.location.coordinate {
                print(mapView.userLocation.location?.distance(from: viewModel.location) ?? 0.0)
                mapView.setCenter(viewModel.location.coordinate, animated: false)
            }
            if mapView.userTrackingMode != .followWithHeading {
                mapView.setUserTrackingMode(.followWithHeading, animated: false)
            }
        }
    }
    
    func displayRegion(viewModel: MapScene.Region.ViewModel) {
        if let mapView = self.mapView {
            mapView.setRegion(mapView.regionThatFits(viewModel.region), animated: false)
            mapView.setUserTrackingMode(.followWithHeading, animated: false)
        }
    }
    
    func displayPlaceLocation(viewModel: MapScene.PlaceLocation.ViewModel) {
        if let annotation = viewModel.annotation {
            mapView.addAnnotation(annotation)
        }
    }
    
    func displayLoadLocations(viewModel: MapScene.LoadLocations.ViewModel) {
        if let annotations = viewModel.annotations {
            for annotation in annotations {
                mapView.addAnnotation(annotation)
            }
        }
    }
    
    func displayDeInit(viewModel: MapScene.DeInit.ViewModel) {
        self.motionManager = nil
        self.locationManager = nil
        self.exifManager = nil
        self.interactor = nil
        self.router = nil
    }

}

extension MapSceneViewController: MKMapViewDelegate {
    
    func mapView(_ mapView: MKMapView, rendererFor overlay: MKOverlay) -> MKOverlayRenderer {
        
        
        if let overlay = overlay as? MKCircle{
            let circleRenderer = MKCircleRenderer(circle: overlay)
            circleRenderer.fillColor = UIColor.green
            circleRenderer.alpha = 0.2
            return circleRenderer
        }
        
        return MKOverlayRenderer(overlay: overlay)
    }
    
    func mapViewDidFinishRenderingMap(_ mapView: MKMapView, fullyRendered: Bool) {
        //print("mapViewDidFinishRenderingMap = \(mapView.region.span)")
        self.saveRegion(region: mapView.region)
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        //guard annotation is MKAnnotation else { return nil }
        
        let identifier = "Annotation"
        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier)
        
        if annotationView == nil {
            annotationView = MKAnnotationView(annotation: annotation, reuseIdentifier: identifier)
            annotationView!.canShowCallout = true
        } else {
            annotationView!.annotation = annotation
        }
        
        annotationView?.image = UIImage(named: "bubble")?.withSize(CGSize(width: 64.0, height: 64.0))
        
        return annotationView
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        print("reuseIdentifier = \(view.reuseIdentifier ?? "no reuseIdentifier")")
    }
    
}

extension MapSceneViewController: MotionManagerDelegate {
    func motionManager(didSensorUpdate sensor: [SensorData : DataVector]) {
        DispatchQueue.main.async {
            if let gravityData: DataVector = sensor[SensorData.gravity] {
                if gravityData.y < -0.5  && !self.isARSceneLoaded {
                    self.isARSceneLoaded = true
                    self.router?.routeToARScene()
                }
            }
        }
    }
}

extension MapSceneViewController: LocationManagerDelegate {
    func locationManager(didLocationUpdate location: CLLocation) {
        self.saveLocation(location: location)
    }
    
    func locationManager(didHeadingUpdate heading: CLHeading) {
        /*DispatchQueue.main.async {
            self.northLabel.text = "TNorth: \(self.exifManager.getHeading(heading: heading, north: .True))"
        }*/
    }
    
    func locationManager(didErrorUpdate error: Error) {
        /*DispatchQueue.main.async {
            self.showErrorAlert(error: error)
        }*/
    }
}
